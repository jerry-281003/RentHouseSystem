@using System.Text.Json
@using Newtonsoft.Json

@model RentHouseSystem.Models.FacilitiesHouse
@{
    string defaultAddress = $"{Model.Address}, {Model.Ward}, {Model.District}, {Model.Province}";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luxury Villa Listing</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="index.css" rel="stylesheet">
</head>
<body>
    <div class="container my-5">
        <div class="row">
            <div class="col-12">
                <h1 class="property-title">@Model.title</h1>
                
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <div id="propertyCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner rounded-3">
                        @foreach(var item in Model.Image)
                        {
                            <div class="carousel-item active">
                                <img src="@item.ImageUrl" class="d-block w-100" alt="Villa Exterior">
                            </div>
                        }
                      
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#propertyCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon"></span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#propertyCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon"></span>
                    </button>
                </div>
                <button class="btn btn-outline-primary mt-3">View All Photos</button>
            </div>
        </div>

        <div class="row">

            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Basic Information</h5>
                        <p><i class="bi bi-geo-alt-fill"></i> @defaultAddress</p>
                        <p><i class="bi bi-telephone-fill"></i> <a href="tel:+1234567890">@Model.ContactPhone</a></p>
                        <p><i class="bi bi-clock-fill"></i> Close Tine: @Model.CloseTime</p>
                        <div class="vehicles mb-3">
                            @if(Model.AcceptableVehicles== vehicles.bicycle)
                            {
                                <span class="badge bg-secondary me-2"><i class="bi bi-bicycle"></i> Bicycle Storage</span>
                            }
                            @if (Model.AcceptableVehicles == vehicles.motorbike)
                            {
                                <span class="badge bg-secondary me-2"><i class="bi bi-bicycle"></i> Motobike Storage</span>
                            }
                            @if (Model.AcceptableVehicles == vehicles.both)
                            {
                                <span class="badge bg-secondary me-2"><i class="bi bi-bicycle"></i> Motobike Storage</span>
                                <span class="badge bg-secondary me-2"><i class="bi bi-bicycle"></i> Bicycle Storage</span>
                            }
                            
                        </div>
                        <p class="description">
                            @Model.Description<br>
                            
                        </p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Key Facilities</h5>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <p><i class="bi bi-house-gear-fill"></i> Equipment: @Model.InventoryEquipment</p>
                                <p><i class="bi bi-lightning-fill"></i> Utilities included: @Model.UtilityCost</p>
                                @if(Model.AirConditioning==true){
                                    <p><i class="bi bi-snow"></i> Air Conditioning: Yes</p>
                                }
                                else
                                {
                                    <p><i class="bi bi-snow"></i> Air Conditioning: No</p>
                                }

                            </div>
                            <div class="col-md-6">
                                <p><i class="bi bi-door-open-fill"></i> @Model.NumberOfBedroom Bedrooms</p>
                                <p><i class="bi bi-droplet-fill"></i> Bathrooms and Toilet:@Model.ToiletAndBathroom</p>
                                <p><i class="bi bi-piggy-bank-fill"></i> Deposit: $@Model.DepositRequired</p>
                                @if (Model.Pet == true)
                                {
                                    <p><i class="bi bi-pet-fill"></i> Pets Allowed: Yes</p>
                                }
                                else
                                {
                                    <p><i class="bi bi-pet-fill"></i> Pets Allowed: No</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Contact Agent</h5>
                        <form asp-controller="Comments" asp-action="UpComment" method="post">
                            <input type="hidden" name="email" value="@User.Identity.Name">
                            <input type="hidden" name="HouseId" value="@Model.HouseId">


                            <div class="mb-3">
                                <input class="form-control" name="CommentContent" type="text" placeholder="Comment" />
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Send Message</button>
                        </form>
                    </div>
                </div>
            </div>
            <p></p>
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-body">

                        <div id="map" style="width: 100%; height: 400px; margin-top: 20px;"></div>

                        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
                        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Pass the Razor variable to JavaScript safely using JsonSerializer
        const defaultAddress = @Html.Raw(JsonConvert.SerializeObject(defaultAddress));

        console.log("Default Address:", defaultAddress);

        // Initialize the map once the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize the map container with a temporary center
            const map = L.map('map').setView([0, 0], 13);

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            }).addTo(map);

            // Initialize the marker
            const marker = L.marker([0, 0]).addTo(map);

            // Function to geocode the address using Nominatim
            async function geocodeAddress(address) {
                try {
                    const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
                    const results = await response.json();

                    if (results.length > 0) {
                        const lat = parseFloat(results[0].lat);
                        const lon = parseFloat(results[0].lon);

                        // Center the map on the geocoded location
                        map.setView([lat, lon], 15); // Adjust zoom level as needed

                        // Update the marker position
                        marker.setLatLng([lat, lon]);
                        marker.bindPopup(`Default Location: ${results[0].display_name}`).openPopup();
                    } else {
                        alert("Could not find the location for the provided address.");
                    }
                } catch (error) {
                    console.error("Error fetching geocode data:", error);
                    alert("An error occurred while fetching the location.");
                }
            }

            // Geocode and set the default view
            geocodeAddress(defaultAddress);
        });
    </script>
</body>
</html>