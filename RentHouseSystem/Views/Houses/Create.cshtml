@model RentHouseSystem.Models.House

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>House</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="HouseId" class="control-label"></label>
                <input asp-for="HouseId" class="form-control" />
                <span asp-validation-for="HouseId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ownerId" class="control-label"></label>
                <input asp-for="ownerId" class="form-control" />
                <span asp-validation-for="ownerId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="title" class="control-label"></label>
                <input asp-for="title" class="form-control" />
                <span asp-validation-for="title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ContactPhone" class="control-label"></label>
                <input asp-for="ContactPhone" class="form-control" />
                <span asp-validation-for="ContactPhone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="province">Province:</label>
                <select id="province" name="province" required>
                    <option value="">Select a province</option>
                </select>

            </div>
            <div class="form-group">
                <label for="district">District:</label>
                <select id="district" name="district" required>
                    <option value="">Select a district</option>
                </select>

            </div>
            <div class="form-group">
                <label for="ward">Ward:</label>
                <select id="ward" name="ward" required>
                    <option value="">Select a ward</option>
                </select>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>

                <select asp-for="Status" class="form-control">


                    <option value="pencding">pencding</option>
                    <option value="rejected">rejected</option>
                    <option value="approved">approved</option>
                </select> 
            </div>
            <div class="form-group">
                <label asp-for="CreatedAt" class="control-label"></label>
                <input asp-for="CreatedAt" class="form-control" />
                <span asp-validation-for="CreatedAt" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UpdatedAt" class="control-label"></label>
                <input asp-for="UpdatedAt" class="form-control" />
                <span asp-validation-for="UpdatedAt" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
       
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<script>
    const provinceAPI = 'https://provinces.open-api.vn/api/p/';
    const districtAPI = 'https://provinces.open-api.vn/api/d/';
    const wardAPI = 'https://provinces.open-api.vn/api/w/';

    const provinceSelect = document.getElementById('province');
    const districtSelect = document.getElementById('district');
    const wardSelect = document.getElementById('ward');

    // Helper function to clear and populate dropdowns
    const clearAndPopulate = (dropdown, items, valueField, textField, defaultText) => {
        dropdown.innerHTML = `<option value="">${defaultText}</option>`;
        items.forEach(item => {
            const option = document.createElement('option');
            option.value = item[valueField];
            option.textContent = item[textField];
            dropdown.appendChild(option);
        });
    };

    // Fetch and populate provinces
    fetch(provinceAPI)
        .then(response => response.json())
        .then(data => {
            clearAndPopulate(provinceSelect, data, 'code', 'name', 'Select a province');
        })
        .catch(error => console.error('Error fetching provinces:', error));

    // Fetch districts dynamically based on province selection
    provinceSelect.addEventListener('change', () => {
        const provinceCode = provinceSelect.value;

        // Clear dependent dropdowns
        districtSelect.innerHTML = '<option value="">Select a district</option>';
        wardSelect.innerHTML = '<option value="">Select a ward</option>';

        if (provinceCode) {
            fetch(districtAPI)
                .then(response => response.json())
                .then(data => {
                    const filteredDistricts = data.filter(d => d.province_code == provinceCode);
                    clearAndPopulate(districtSelect, filteredDistricts, 'code', 'name', 'Select a district');
                })
                .catch(error => console.error('Error fetching districts:', error));
        }
    });

    // Fetch wards dynamically based on district selection
    districtSelect.addEventListener('change', () => {
        const districtCode = districtSelect.value;

        // Clear ward dropdown
        wardSelect.innerHTML = '<option value="">Select a ward</option>';

        if (districtCode) {
            fetch(wardAPI)
                .then(response => response.json())
                .then(data => {
                    const filteredWards = data.filter(w => w.district_code == districtCode);
                    clearAndPopulate(wardSelect, filteredWards, 'code', 'name', 'Select a ward');
                })
                .catch(error => console.error('Error fetching wards:', error));
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
        